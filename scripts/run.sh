#!/bin/bash
set -e

############################################
### 1. –ü—Ä–æ–≤–µ—Ä–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ config.json
############################################

check_and_fix_config_json() {
  if [ ! -f "config.json" ]; then
    echo "‚ùó –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º..."
    cat <<EOF > config.json
{
    "TELEGRAM_TOKEN": "<—Å—é–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ —Ç–µ–ª–µ–≥–∏>",
    "OPENAI_API_KEY": "<–°—é–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –≥–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ sk-proj-...",
    "ASSISTANT_ID": "<—Å—é–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∞–π–¥–∏—à–Ω–∏–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –ø–ª–µ–π–≥—Ä–∞—É–Ω–¥–∞>"
}
EOF
  fi

  get_json_field() {
    python3 -c "import json; data=json.load(open('config.json')); print(data.get('$1',''))" 2>/dev/null || echo ""
  }

  set_json_field() {
    python3 -c "
import json
data=json.load(open('config.json'))
data['$1']='$2'
with open('config.json','w') as f:
    json.dump(data,f,indent=4)
" 2>/dev/null || true
  }

  # 1) TELEGRAM_TOKEN
  CUR_TELE_TOKEN=$(get_json_field "TELEGRAM_TOKEN")
  if [[ "$CUR_TELE_TOKEN" == "<—Å—é–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ —Ç–µ–ª–µ–≥–∏>" || -z "$CUR_TELE_TOKEN" ]]; then
    echo "‚ö† TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä."
    read -p "–í–≤–µ–¥–∏—Ç–µ TELEGRAM_TOKEN (Telegram Bot Token): " NEW_TELE_TOKEN
    set_json_field "TELEGRAM_TOKEN" "$NEW_TELE_TOKEN"
  fi

  # 2) OPENAI_API_KEY (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å sk-proj-)
  CUR_OPENAI_KEY=$(get_json_field "OPENAI_API_KEY")
  if [[ "$CUR_OPENAI_KEY" == "<–°—é–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –≥–ø—Ç"* || -z "$CUR_OPENAI_KEY" || "$CUR_OPENAI_KEY" != sk-proj-* ]]; then
    echo "‚ö† OPENAI_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å sk-proj-..."
    read -p "–í–≤–µ–¥–∏—Ç–µ OPENAI_API_KEY (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å sk-proj-): " NEW_OPENAI_KEY
    set_json_field "OPENAI_API_KEY" "$NEW_OPENAI_KEY"
  fi

  # 3) ASSISTANT_ID
  CUR_ASSIST_ID=$(get_json_field "ASSISTANT_ID")
  if [[ "$CUR_ASSIST_ID" == "<—Å—é–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∞–π–¥–∏—à–Ω–∏–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"* || -z "$CUR_ASSIST_ID" ]]; then
    echo "‚ö† ASSISTANT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä."
    read -p "–í–≤–µ–¥–∏—Ç–µ ASSISTANT_ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, asst_...): " NEW_ASSIST_ID
    set_json_field "ASSISTANT_ID" "$NEW_ASSIST_ID"
  fi
}

############################################
### 2. –°–æ–∑–¥–∞–Ω–∏–µ/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ venv
############################################

install_python3() {
  echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º python3, python3-pip, python3-venv..."
  sudo apt update && sudo apt install -y python3 python3-pip python3-venv || true
}

create_or_fix_venv() {
  local PYTHON_EXEC="$1"
  local VENV_DIR="$2"

  if [ ! -d "$VENV_DIR" ]; then
    echo "üîß –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $VENV_DIR..."
    "$PYTHON_EXEC" -m venv "$VENV_DIR" || true
  fi

  if [ ! -f "$VENV_DIR/bin/python3" ] && [ ! -f "$VENV_DIR/bin/python" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ $VENV_DIR, –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ venv..."
    install_python3
    rm -rf "$VENV_DIR"
    "$PYTHON_EXEC" -m venv "$VENV_DIR" || true
  fi

  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0, –µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –ø–∏—Ç–æ–Ω –µ—Å—Ç—å:
  if [ -f "$VENV_DIR/bin/python3" ] || [ -f "$VENV_DIR/bin/python" ]; then
    return 0
  else
    return 1
  fi
}

############################################
### –°—Ç–∞—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞
############################################
echo "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º config.json..."
check_and_fix_config_json

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
PYTHON_EXEC=$(command -v python3 || true)
if [ -z "$PYTHON_EXEC" ]; then
  install_python3
  PYTHON_EXEC=$(command -v python3 || true)
  if [ -z "$PYTHON_EXEC" ]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python3!"
    exit 1
  fi
fi

echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Python: $PYTHON_EXEC"

VENV_DIR="bot_env"
if create_or_fix_venv "$PYTHON_EXEC" "$VENV_DIR"; then
  echo "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ: $VENV_DIR"

  # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∏—Ç–æ–Ω –≤–Ω—É—Ç—Ä–∏ venv
  if [ -f "$VENV_DIR/bin/python3" ]; then
    PYTHON_VENV="$VENV_DIR/bin/python3"
  else
    PYTHON_VENV="$VENV_DIR/bin/python"
  fi

  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ pip –µ—Å—Ç—å (ensurepip)
  if ! "$PYTHON_VENV" -m pip --version &>/dev/null; then
    echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏..."
    "$PYTHON_VENV" -m ensurepip --upgrade || true
  fi

  echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
  if ! "$PYTHON_VENV" -m pip install --upgrade pip --break-system-packages &>/dev/null; then
    "$PYTHON_VENV" -m pip install --upgrade pip || true
  fi

  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
  "$PYTHON_VENV" -m pip install openai aiogram python-dotenv || true

  echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞..."
  "$PYTHON_VENV" bot.py
else
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å venv! (–ú–æ–∂–Ω–æ fallback –Ω–∞ pipx/pip --user...)"
fi
